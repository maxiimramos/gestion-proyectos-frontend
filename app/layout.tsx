"use client"

// renderizacion de cliente => "use client" => Decir a next que el componente sea tratado desde cliente
// => Puedes usar hooks => Peor rendimiento.

// renderizacion de servidor => Es mas rapida / mas eficiente => no puedes trabajar con HOOKS de react
// => Siempre por defecto los componentes se renderizan desde el servidor => No puedes trabajr con hooks
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Head from "next/head";
import { Col, Container, Row, Tab } from "react-bootstrap";
import { MainTab } from "@/components/tabs/MainTab";
import { AuthContext } from "@/contexts/AuthContext";
import { useEffect, useState } from "react";
import Footer from "@/components/footers/Footer";
import { CookiesProvider } from 'next-client-cookies/server';


const inter = Inter({ subsets: ["latin"] });
/*
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};*/

// 1- Context
// 2- Local storage
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
 
  const [user, setUser] = useState(null)
  useEffect(() => {
    // Obtenemos el local storage => Es estatico
    const userRetrieved = localStorage.getItem("user");
    if (userRetrieved) {
      const userSession = JSON.parse(userRetrieved);
      
      // Y lo convertimos en algo dinamico => Context => Tiene un estado para la sesion
      setUser(userSession);
    }
  }, [])

  return (
    <html lang="en">
      <body className={inter.className}>

        <AuthContext.Provider value={{ user, setUser }}>
        
          <Container className="layout-main" >
            
          <MainTab />

             {children}

          </Container>
          <Footer></Footer>
        </AuthContext.Provider>

      </body>
    </html>
  );
}
